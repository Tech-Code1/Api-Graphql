'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Query = function () {
	function Query(name, query, params) {
		_classCallCheck(this, Query);

		this.id = name;
		this.query = query;
		this.params = params;
	}

	_createClass(Query, [{
		key: 'set',
		value: function set(query, params) {}
	}, {
		key: 'on',
		value: function on(name, fn) {
			if (name == 'data') {
				this.onData = fn;
			} else if (name == 'error') {
				this.onError = fn;
			}
		}
	}, {
		key: '_onData',
		value: function _onData(msg) {
			if (!msg.data) {
				this._onError(new Error('no result data'));
			} else if (msg.data.errors && msg.data.errors.length > 0) {
				this._onError(new Error(msg.data.errors.map(function (err) {
					return err.message;
				}).join(' AND ')));
			} else if (this.onData) {
				try {
					this.onData(msg.data.data);
				} catch (err) {
					this._onError(err);
				}
			}
		}
	}, {
		key: '_onError',
		value: function _onError(err) {
			if (this.onError) {
				this.onError(err);
			}
		}
	}]);

	return Query;
}();

exports.default = Query;


module.exports = Query;