'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Connection = require('./Connection');

var _Connection2 = _interopRequireDefault(_Connection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Store = function () {
	function Store(_ref) {
		var _this = this;

		var host = _ref.host;
		var credentials = _ref.credentials;

		_classCallCheck(this, Store);

		this.onLostConnection = function () {
			_this.conn = null;
			if (_this.onConnectionStateChange) {
				_this.onConnectionStateChange(false);
			}
			setTimeout(function () {
				_this.connect().catch(function (err) {
					console.error('failed to reconnect', err);
				});
			}, 2000);
		};

		this.host = host;
		this.credentials = credentials;
		this.connected = false;
		this.authenticated = false;
		this.subscriptions = {};
	}

	_createClass(Store, [{
		key: 'connect',
		value: function connect(credentials) {
			var _this2 = this;

			if (credentials) {
				this.credentials = credentials;
			}
			if (!this.conn) {
				if (!this.credentials) {
					return Promise.reject(new Error('no credentials'));
				}
				var conn = new _Connection2.default({
					host: this.host
				});
				conn.onClose = this.onLostConnection;
				this.conn = conn.connect(this.credentials).then(function (conn) {
					for (var id in _this2.subscriptions) {
						conn._subscribe(_this2.subscriptions[id]);
					}
					if (_this2.onConnectionStateChange) {
						_this2.onConnectionStateChange(true);
					}
					return conn;
				}).catch(function (err) {
					_this2.conn = null;
					return Promise.reject(err);
				});
			}
			return Promise.resolve(this.conn);
		}
	}, {
		key: 'subscribe',
		value: function subscribe() {
			var _this3 = this;

			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			var conn = void 0;
			return this.connect().then(function (c) {
				var _conn;

				conn = c;
				return (_conn = conn).subscribe.apply(_conn, args);
			}).then(function (query) {
				_this3.subscriptions = conn.subscriptions;
				return query;
			});
		}
	}, {
		key: 'setType',
		value: function setType() {
			var _this4 = this;

			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}

			return this.connect().then(function (conn) {
				return conn.setType.apply(conn, args);
			}).then(function (res) {
				return _this4.commit().then(function () {
					return res;
				});
			});
		}
	}, {
		key: 'setNode',
		value: function setNode() {
			var _this5 = this;

			for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
				args[_key3] = arguments[_key3];
			}

			return this.connect().then(function (conn) {
				return conn.setNode.apply(conn, args);
			}).then(function (res) {
				return _this5.commit().then(function () {
					return res;
				});
			});
		}
	}, {
		key: 'commit',
		value: function commit() {
			return this.connect().then(function (conn) {
				return conn.commit();
			});
		}
	}, {
		key: 'navigate',
		value: function navigate(path, params) {
			if (!this.router) {
				return;
			}
			this.router.push(path);
		}
	}, {
		key: 'close',
		value: function close() {
			return this.connect().then(function (c) {
				return c.close();
			});
		}
	}]);

	return Store;
}();

exports.default = Store;